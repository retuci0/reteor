/*
 * This file is part of the Meteor Client distribution (https://github.com/MeteorDevelopment/meteor-client).
 * Copyright (c) Meteor Development.
 */

package net.retucio.reteor.modules;

import com.google.common.collect.ImmutableSet;
import meteordevelopment.meteorclient.events.packets.PacketEvent;
import meteordevelopment.meteorclient.settings.*;
import net.minecraft.item.*;
import net.minecraft.network.packet.c2s.play.PlayerActionC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerInteractItemC2SPacket;
import net.minecraft.util.Hand;
import net.retucio.reteor.Reteor;

import meteordevelopment.meteorclient.systems.modules.Module;
import meteordevelopment.orbit.EventHandler;

import net.minecraft.network.packet.c2s.play.ClientCommandC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;

import java.util.List;

// there's a glitch where the arrow just happens to become autistic and goes everywhere except where you aim at
// so just use it in a more close range
// btw you'll probably get kicked for exceeding the packet limit on most servers

public class ProjectileExploit extends Module {

    SettingGroup sgGeneral = settings.getDefaultGroup();

    private final Setting<List<Item>> items = sgGeneral.add(new ItemListSetting.Builder()
        .name("items")
        .description("Which items it'll work with.")
        .filter(this::filterItems)
        .build()
    );

    private final Setting<Integer> timeOut = sgGeneral.add(new IntSetting.Builder()
        .name("time-out")
        .description("Time Out.")
        .range(100, 20000)
        .sliderRange(100, 20000)
        .defaultValue(5000)
        .build()
    );

    private final Setting<Integer> spoofs = sgGeneral.add(new IntSetting.Builder()
        .name("spoofs")
        .range(1, 300)
        .sliderRange(1, 300)
        .defaultValue(10)
        .build()
    );

    private final Setting<Boolean> bypass = sgGeneral.add(new BoolSetting.Builder()
        .name("bypass")
        .defaultValue(false)
        .build()
    );

    private final Setting<Boolean> debug = sgGeneral.add(new BoolSetting.Builder()
        .name("debug")
        .defaultValue(false)
        .build()
    );

    private boolean shooting = false;
    private long lastShootTime;

    public ProjectileExploit() {
        super(Reteor.CATEGORY, "projectile-exploit", "Makes your projectiles way more powerful.");
    }

    @EventHandler
    private void onSendPacket(PacketEvent.Send event) {
        if (mc.player == null) return;

        if (event.packet instanceof PlayerActionC2SPacket packet) {
            if (packet.getAction() == PlayerActionC2SPacket.Action.RELEASE_USE_ITEM) {
                ItemStack handStack = mc.player.getMainHandStack();

                if (!handStack.isEmpty() && handStack.getItem() != null && handStack.getItem() instanceof BowItem && items.get().contains(Items.BOW)) {
                    doSpoofs();
                    if (debug.get() && !shooting) error("Trying to spoof");
                }
            }

        }

        else if (event.packet instanceof PlayerInteractItemC2SPacket packet) {
            if (packet.getHand() == Hand.MAIN_HAND) {
                ItemStack handStack = mc.player.getMainHandStack();

                if (!handStack.isEmpty() && handStack.getItem() != null) {
                    switch (handStack.getItem()) {
                        case EggItem itemEgg when items.get().contains(Items.EGG) -> doSpoofs();
                        case EnderPearlItem itemEnderPearl when items.get().contains(Items.ENDER_PEARL) -> doSpoofs();
                        case SnowballItem itemSnowball when items.get().contains(Items.SNOWBALL) -> doSpoofs();
                        default -> {}
                    }
                }
            }
        }
    }


    private void doSpoofs() {
        if (System.currentTimeMillis() - lastShootTime >= timeOut.get()) {
            shooting = false;
            lastShootTime = System.currentTimeMillis();

            mc.player.networkHandler.sendPacket(new ClientCommandC2SPacket(mc.player, ClientCommandC2SPacket.Mode.START_SPRINTING));

            for (int index = 0; index < spoofs.get(); ++index) {
                if (bypass.get()) {
                    mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(mc.player.getX(), mc.player.getY() + 1e-10, mc.player.getZ(), false));
                    mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(mc.player.getX(), mc.player.getY() - 1e-10, mc.player.getZ(), true));
                } else {
                    mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(mc.player.getX(), mc.player.getY() - 1e-10, mc.player.getZ(), true));
                    mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(mc.player.getX(), mc.player.getY() + 1e-10, mc.player.getZ(), false));
                }

            }

            if (debug.get()) info("Spoofed");
            shooting = true;
        }
    }

    private boolean filterItems(Item item) {
        final ImmutableSet<Item> set = ImmutableSet.of(
            Items.BOW, Items.EGG, Items.ENDER_PEARL, Items.SNOWBALL, Items.WIND_CHARGE, Items.CROSSBOW, Items.TRIDENT);

        return set.contains(item);
    }
}
